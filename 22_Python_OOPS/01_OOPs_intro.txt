----------------------
Python OOPs Concepts :
----------------------

    Python is an object-oriented programming language which uses classes and objects for computations.

-------------------------------------------------------------------
Advantages of Python being a Object Oriented Programming Language :
-------------------------------------------------------------------

    1. Development and maintenance of Python codes is easier than the procedural programming.
    2. Python can easily solve the real world problems as it does not works on step by step instructions.
    3. Data in Python codes are secure due to its special feature of data hiding.

--------------------
Principles of OOPs :
--------------------

    An object oriented programming is based on seven fundamental principles.

        1. Object
        2. Class
        3. Method
        4. Inheritance
        5. Polymorphism
        6. Encapsulation
        7. Data Abstraction

-------
Class :
-------

Class is a template or blueprint.

    1. The class can be defined as a collection of objects. 
    2. It is a logical entity that has some specific attributes and methods.
    3. For example: if you have an employee class, then it should contain an attribute and method, 
    4. i.e. an email id, name, age, salary, etc.

--------
Object :
--------

    1. The object is an entity that has state and behavior. 
    2. It may be any real-world object like the mouse, keyboard, chair, table, pen, etc.

--------
Method :
--------

    1. The method is a function that is associated with an object. 
    2. In Python, a method is not unique to class instances. 
    3. Any object type can have methods.

-------------
Inheritance :
-------------

    1. Inheritance is the most important aspect of object-oriented programming.
    2. It specifies that the child object acquires all the properties and behaviors of the parent object.

    1. By using inheritance, we can create a class which uses all the properties and behavior of another class. 
    2. The new class is known as a derived class or child class, 
    3. and the one whose properties are acquired is known as a base class or parent class.

    1. It provides the re-usability of the code.

--------------
Polymorphism :
--------------

    1. Polymorphism contains two words "poly" and "morphs". Poly means many, and morph means shape. 
    2. By polymorphism, we understand that one task can be performed in different ways. 
    3. For example - you have a class animal, and all animals speak. 
    4. But they speak differently. 
    5. Here, the "speak" behavior is polymorphic in a sense and depends on the animal. 

---------------
Encapsulation :
---------------

    1. Encapsulation in Python describes the concept of bundling data and methods within a single unit.
    2.  So, for example, when you create a class, it means you are implementing encapsulation. 
    3. A class is an example of encapsulation as it binds all the data members (instance variables) 
        and methods into a single unit.

------------------
Data Abstraction :
------------------

    1. Abstraction is used to hide internal details and show only functionalities.